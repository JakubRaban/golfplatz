# Generated by Django 3.0.5 on 2020-04-09 19:15

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import golfplatz.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('student_number', models.CharField(max_length=10, null=True, unique=True)),
                ('phone_number', models.CharField(max_length=9, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be exactly 9 digits long', regex='^\\d{9}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', golfplatz.managers.ParticipantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Adventure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('task_description', models.TextField()),
                ('message_after_correct_answer', models.TextField()),
                ('message_after_incorrect_answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AutoCheckedGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_scored', models.DecimalField(decimal_places=3, max_digits=6)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Path',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_adventure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_adventure', to='golfplatz.Adventure')),
            ],
        ),
        migrations.CreateModel(
            name='PointSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='AutoCheckedPointSource',
            fields=[
                ('pointsource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='golfplatz.PointSource')),
                ('point_source_category', models.CharField(choices=[('QUIZ', 'Quiz'), ('SURPRISE', 'Surprise exercise'), ('GENERIC', 'Generic lab exercise')], max_length=8)),
            ],
            bases=('golfplatz.pointsource',),
        ),
        migrations.CreateModel(
            name='TutorCheckedGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_scored', models.DecimalField(decimal_places=3, max_digits=6)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TimerRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('least_points_awarded_percent', models.PositiveSmallIntegerField()),
                ('rule_end_time', models.PositiveSmallIntegerField()),
                ('decreasing_method', models.CharField(choices=[('LIN', 'Linear'), ('NONE', 'None')], default='NONE', max_length=4)),
                ('adventure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.Adventure')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=250)),
                ('points_per_correct_answer', models.DecimalField(decimal_places=3, max_digits=6)),
                ('points_per_incorrect_answer', models.DecimalField(decimal_places=3, max_digits=6)),
                ('question_type', models.CharField(choices=[('OPEN', 'Open question'), ('CLOSED', 'Closed question')], max_length=6)),
                ('auto_checked_grades', models.ManyToManyField(through='golfplatz.AutoCheckedGrade', to=settings.AUTH_USER_MODEL)),
                ('point_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.AutoCheckedPointSource')),
            ],
        ),
        migrations.CreateModel(
            name='PlotPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('introduction', models.TextField()),
                ('position_in_course', models.PositiveSmallIntegerField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.Course')),
            ],
        ),
        migrations.CreateModel(
            name='PathCoverage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adventure_started_time', models.DateTimeField()),
                ('time_elapsed_seconds', models.PositiveSmallIntegerField()),
                ('path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.Path')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='path',
            name='students',
            field=models.ManyToManyField(through='golfplatz.PathCoverage', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='path',
            name='to_adventure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_adventure', to='golfplatz.Adventure'),
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=40)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.Course')),
                ('students', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('position_in_plot_part', models.PositiveSmallIntegerField()),
                ('initial_adventure', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='golfplatz.Adventure')),
                ('plot_part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.PlotPart')),
            ],
        ),
        migrations.AddField(
            model_name='autocheckedgrade',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.Question'),
        ),
        migrations.AddField(
            model_name='autocheckedgrade',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=250)),
                ('is_correct', models.BooleanField()),
                ('is_regex', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.Question')),
            ],
        ),
        migrations.AddField(
            model_name='adventure',
            name='point_source',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='golfplatz.PointSource'),
        ),
        migrations.CreateModel(
            name='SurpriseExercise',
            fields=[
                ('autocheckedpointsource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='golfplatz.AutoCheckedPointSource')),
                ('earliest_possible_send_time', models.DateTimeField()),
                ('latest_possible_send_time', models.DateTimeField()),
                ('sending_method', models.CharField(choices=[('EMAIL', 'Email'), ('PHONE', 'Phone')], max_length=5)),
            ],
            bases=('golfplatz.autocheckedpointsource',),
        ),
        migrations.CreateModel(
            name='TutorCheckedPointSource',
            fields=[
                ('pointsource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='golfplatz.PointSource')),
                ('max_points', models.DecimalField(decimal_places=3, max_digits=6)),
                ('category', models.CharField(choices=[('ACTIVENESS', 'Activeness'), ('TEST', 'Test'), ('HOMEWORK', 'Homework or project')], max_length=10)),
                ('input_type', models.CharField(choices=[('NONE', 'None'), ('TEXTFIELD', 'Small text field'), ('TEXTAREA', 'Large text area')], default='NONE', max_length=9)),
                ('tutor_checked_grades', models.ManyToManyField(through='golfplatz.TutorCheckedGrade', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('golfplatz.pointsource',),
        ),
        migrations.AddField(
            model_name='tutorcheckedgrade',
            name='tutor_checked_source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='golfplatz.TutorCheckedPointSource'),
        ),
    ]
